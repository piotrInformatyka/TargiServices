// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Targi.Infrastructure.Data;

namespace Targi.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Targi.Core.Domain.BenefitCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyProfileId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CompanyProfileId");

                    b.ToTable("BenefitCards");
                });

            modelBuilder.Entity("Targi.Core.Domain.CompanyProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CompanyName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CompanyStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DayOfParticipation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MaxJobOffers")
                        .HasColumnType("int");

                    b.Property<string>("NipNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CompanyProfiles");
                });

            modelBuilder.Entity("Targi.Core.Domain.JobOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Category")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ColorBackground")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ColorText")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("CompanyProfileId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsPromoted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Location")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("WageHigh")
                        .HasColumnType("int");

                    b.Property<int>("WageLow")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyProfileId");

                    b.ToTable("JobOffers");
                });

            modelBuilder.Entity("Targi.Core.Domain.ModeratorProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Position")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ModeratorProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("69dcffbe-4de9-458f-93fb-4cd33517ec08"),
                            ContactPerson = "Webmastery",
                            PhoneNumber = "783032065",
                            Position = "admin",
                            UserId = new Guid("7ed40d3c-bcc6-458e-a4ac-a944269f7287")
                        });
                });

            modelBuilder.Entity("Targi.Core.Domain.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Position")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Photo");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Photo");
                });

            modelBuilder.Entity("Targi.Core.Domain.Social", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyProfileId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CompanyProfileId");

                    b.ToTable("Socials");
                });

            modelBuilder.Entity("Targi.Core.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCompany")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("Password")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob");

                    b.Property<string>("Role")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ed40d3c-bcc6-458e-a4ac-a944269f7287"),
                            CreatedAt = new DateTime(2020, 11, 4, 22, 43, 4, 611, DateTimeKind.Local).AddTicks(8283),
                            Email = "admin",
                            IsActive = true,
                            IsCompany = false,
                            Password = new byte[] { 129, 218, 128, 134, 34, 47, 57, 78, 216, 36, 62, 210, 112, 33, 156, 97, 120, 212, 134, 60, 175, 175, 214, 163, 99, 37, 90, 91, 108, 93, 82, 29, 199, 120, 22, 215, 209, 48, 218, 56, 142, 39, 115, 199, 202, 70, 27, 194, 143, 62, 15, 26, 245, 76, 132, 118, 2, 118, 37, 154, 223, 182, 133, 117 },
                            PasswordSalt = new byte[] { 220, 247, 149, 209, 209, 192, 169, 34, 173, 70, 61, 79, 36, 142, 110, 233, 2, 124, 60, 143, 35, 169, 3, 50, 122, 248, 8, 97, 81, 170, 84, 77, 22, 57, 161, 35, 120, 9, 242, 220, 56, 250, 164, 221, 212, 0, 63, 104, 149, 121, 221, 214, 77, 57, 185, 51, 6, 27, 0, 250, 161, 217, 48, 44, 67, 63, 148, 233, 228, 50, 216, 116, 232, 29, 98, 250, 119, 110, 102, 38, 40, 202, 76, 152, 163, 163, 74, 79, 120, 213, 131, 123, 8, 176, 234, 227, 75, 155, 70, 165, 119, 107, 73, 231, 125, 234, 58, 155, 227, 72, 47, 20, 143, 137, 131, 32, 28, 251, 100, 17, 45, 51, 25, 193, 39, 31, 59, 205 },
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("Targi.Core.Domain.Webinar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyProfileId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("EndDateOfTheEvent")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("StartDateOfTheEvent")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("WebinarUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CompanyProfileId");

                    b.ToTable("Webinars");
                });

            modelBuilder.Entity("Targi.Core.Domain.CompanyProfilePhoto", b =>
                {
                    b.HasBaseType("Targi.Core.Domain.Photo");

                    b.Property<Guid>("CompanyProfileId")
                        .HasColumnType("char(36)");

                    b.HasIndex("CompanyProfileId");

                    b.HasDiscriminator().HasValue("CompanyProfilePhoto");
                });

            modelBuilder.Entity("Targi.Core.Domain.JobOfferPhoto", b =>
                {
                    b.HasBaseType("Targi.Core.Domain.Photo");

                    b.Property<Guid>("JobOfferId")
                        .HasColumnType("char(36)");

                    b.HasIndex("JobOfferId");

                    b.HasDiscriminator().HasValue("JobOfferPhoto");
                });

            modelBuilder.Entity("Targi.Core.Domain.WebinarPhoto", b =>
                {
                    b.HasBaseType("Targi.Core.Domain.Photo");

                    b.Property<Guid>("WebinarId")
                        .HasColumnType("char(36)");

                    b.HasIndex("WebinarId");

                    b.HasDiscriminator().HasValue("WebinarPhoto");
                });

            modelBuilder.Entity("Targi.Core.Domain.BenefitCard", b =>
                {
                    b.HasOne("Targi.Core.Domain.CompanyProfile", null)
                        .WithMany("BenefitCards")
                        .HasForeignKey("CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Targi.Core.Domain.CompanyProfile", b =>
                {
                    b.HasOne("Targi.Core.Domain.User", "User")
                        .WithOne("CompanyProfile")
                        .HasForeignKey("Targi.Core.Domain.CompanyProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Targi.Core.Domain.JobOffer", b =>
                {
                    b.HasOne("Targi.Core.Domain.CompanyProfile", "CompanyProfile")
                        .WithMany("JobOffers")
                        .HasForeignKey("CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Targi.Core.Domain.ModeratorProfile", b =>
                {
                    b.HasOne("Targi.Core.Domain.User", "User")
                        .WithOne("ModeratorProfile")
                        .HasForeignKey("Targi.Core.Domain.ModeratorProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Targi.Core.Domain.Social", b =>
                {
                    b.HasOne("Targi.Core.Domain.CompanyProfile", null)
                        .WithMany("Socials")
                        .HasForeignKey("CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Targi.Core.Domain.Webinar", b =>
                {
                    b.HasOne("Targi.Core.Domain.CompanyProfile", "CompanyProfile")
                        .WithMany("Webinars")
                        .HasForeignKey("CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Targi.Core.Domain.CompanyProfilePhoto", b =>
                {
                    b.HasOne("Targi.Core.Domain.CompanyProfile", "CompanyProfile")
                        .WithMany("Photos")
                        .HasForeignKey("CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Targi.Core.Domain.JobOfferPhoto", b =>
                {
                    b.HasOne("Targi.Core.Domain.JobOffer", "JobOffer")
                        .WithMany("Photos")
                        .HasForeignKey("JobOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Targi.Core.Domain.WebinarPhoto", b =>
                {
                    b.HasOne("Targi.Core.Domain.Webinar", "Webinar")
                        .WithMany("Photos")
                        .HasForeignKey("WebinarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
