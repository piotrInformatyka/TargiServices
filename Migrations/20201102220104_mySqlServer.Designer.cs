// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Targi.Infrastructure.Data;

namespace Targi.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201102220104_mySqlServer")]
    partial class mySqlServer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Targi.Core.Domain.BenefitCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyProfileId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CompanyProfileId");

                    b.ToTable("BenefitCards");
                });

            modelBuilder.Entity("Targi.Core.Domain.CompanyProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CompanyName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CompanyStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DayOfParticipation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MaxJobOffers")
                        .HasColumnType("int");

                    b.Property<string>("NipNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CompanyProfiles");
                });

            modelBuilder.Entity("Targi.Core.Domain.JobOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Category")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ColorBackground")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ColorText")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("CompanyProfileId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsPromoted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Location")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("WageHigh")
                        .HasColumnType("int");

                    b.Property<int>("WageLow")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyProfileId");

                    b.ToTable("JobOffers");
                });

            modelBuilder.Entity("Targi.Core.Domain.ModeratorProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Position")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ModeratorProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e97e9f5-f618-4889-9921-5e1e8b17ca52"),
                            ContactPerson = "Webmastery",
                            PhoneNumber = "783032065",
                            Position = "admin",
                            UserId = new Guid("0f269511-f64c-4458-824b-57fc0a815ff5")
                        });
                });

            modelBuilder.Entity("Targi.Core.Domain.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Position")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Photo");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Photo");
                });

            modelBuilder.Entity("Targi.Core.Domain.Social", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyProfileId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CompanyProfileId");

                    b.ToTable("Socials");
                });

            modelBuilder.Entity("Targi.Core.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCompany")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("Password")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob");

                    b.Property<string>("Role")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0f269511-f64c-4458-824b-57fc0a815ff5"),
                            CreatedAt = new DateTime(2020, 11, 2, 23, 1, 3, 841, DateTimeKind.Local).AddTicks(6906),
                            Email = "admin",
                            IsActive = true,
                            IsCompany = false,
                            Password = new byte[] { 194, 7, 242, 213, 115, 105, 124, 49, 140, 234, 74, 119, 133, 33, 220, 83, 119, 90, 106, 197, 74, 248, 114, 108, 218, 47, 35, 226, 153, 172, 41, 172, 240, 84, 212, 179, 45, 163, 243, 206, 116, 174, 74, 17, 240, 65, 188, 146, 16, 86, 38, 20, 6, 140, 86, 115, 102, 98, 162, 101, 73, 186, 118, 102 },
                            PasswordSalt = new byte[] { 37, 206, 66, 133, 52, 35, 33, 54, 213, 20, 201, 62, 215, 177, 91, 242, 190, 16, 174, 89, 255, 232, 114, 60, 88, 91, 175, 141, 40, 94, 97, 140, 167, 216, 189, 124, 185, 50, 243, 229, 165, 3, 154, 243, 88, 126, 224, 34, 25, 117, 63, 19, 99, 23, 18, 12, 119, 61, 37, 190, 178, 110, 64, 166, 104, 162, 25, 129, 40, 89, 252, 60, 3, 59, 24, 41, 192, 191, 223, 165, 231, 232, 124, 150, 105, 232, 39, 247, 28, 29, 188, 10, 176, 234, 61, 197, 251, 95, 155, 250, 196, 56, 219, 26, 210, 179, 185, 38, 47, 167, 114, 195, 200, 198, 244, 19, 15, 31, 45, 69, 197, 133, 182, 43, 250, 254, 82, 210 },
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("Targi.Core.Domain.Webinar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyProfileId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("EndDateOfTheEvent")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("StartDateOfTheEvent")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("WebinarUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CompanyProfileId");

                    b.ToTable("Webinars");
                });

            modelBuilder.Entity("Targi.Core.Domain.CompanyProfilePhoto", b =>
                {
                    b.HasBaseType("Targi.Core.Domain.Photo");

                    b.Property<Guid>("CompanyProfileId")
                        .HasColumnType("char(36)");

                    b.HasIndex("CompanyProfileId");

                    b.HasDiscriminator().HasValue("CompanyProfilePhoto");
                });

            modelBuilder.Entity("Targi.Core.Domain.JobOfferPhoto", b =>
                {
                    b.HasBaseType("Targi.Core.Domain.Photo");

                    b.Property<Guid>("JobOfferId")
                        .HasColumnType("char(36)");

                    b.HasIndex("JobOfferId");

                    b.HasDiscriminator().HasValue("JobOfferPhoto");
                });

            modelBuilder.Entity("Targi.Core.Domain.WebinarPhoto", b =>
                {
                    b.HasBaseType("Targi.Core.Domain.Photo");

                    b.Property<Guid>("WebinarId")
                        .HasColumnType("char(36)");

                    b.HasIndex("WebinarId");

                    b.HasDiscriminator().HasValue("WebinarPhoto");
                });

            modelBuilder.Entity("Targi.Core.Domain.BenefitCard", b =>
                {
                    b.HasOne("Targi.Core.Domain.CompanyProfile", null)
                        .WithMany("BenefitCards")
                        .HasForeignKey("CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Targi.Core.Domain.CompanyProfile", b =>
                {
                    b.HasOne("Targi.Core.Domain.User", "User")
                        .WithOne("CompanyProfile")
                        .HasForeignKey("Targi.Core.Domain.CompanyProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Targi.Core.Domain.JobOffer", b =>
                {
                    b.HasOne("Targi.Core.Domain.CompanyProfile", "CompanyProfile")
                        .WithMany("JobOffers")
                        .HasForeignKey("CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Targi.Core.Domain.ModeratorProfile", b =>
                {
                    b.HasOne("Targi.Core.Domain.User", "User")
                        .WithOne("ModeratorProfile")
                        .HasForeignKey("Targi.Core.Domain.ModeratorProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Targi.Core.Domain.Social", b =>
                {
                    b.HasOne("Targi.Core.Domain.CompanyProfile", null)
                        .WithMany("Socials")
                        .HasForeignKey("CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Targi.Core.Domain.Webinar", b =>
                {
                    b.HasOne("Targi.Core.Domain.CompanyProfile", "CompanyProfile")
                        .WithMany("Webinars")
                        .HasForeignKey("CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Targi.Core.Domain.CompanyProfilePhoto", b =>
                {
                    b.HasOne("Targi.Core.Domain.CompanyProfile", "CompanyProfile")
                        .WithMany("Photos")
                        .HasForeignKey("CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Targi.Core.Domain.JobOfferPhoto", b =>
                {
                    b.HasOne("Targi.Core.Domain.JobOffer", "JobOffer")
                        .WithMany("Photos")
                        .HasForeignKey("JobOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Targi.Core.Domain.WebinarPhoto", b =>
                {
                    b.HasOne("Targi.Core.Domain.Webinar", "Webinar")
                        .WithMany("Photos")
                        .HasForeignKey("WebinarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
