// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Targi.Infrastructure.Data;

namespace Targi.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201102000250_mySQL")]
    partial class mySQL
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Targi.Core.Domain.BenefitCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyProfileId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CompanyProfileId");

                    b.ToTable("BenefitCards");
                });

            modelBuilder.Entity("Targi.Core.Domain.CompanyProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CompanyName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CompanyStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DayOfParticipation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MaxJobOffers")
                        .HasColumnType("int");

                    b.Property<string>("NipNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CompanyProfiles");
                });

            modelBuilder.Entity("Targi.Core.Domain.JobOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Category")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ColorBackground")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ColorText")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("CompanyProfileId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsPromoted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Location")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("WageHigh")
                        .HasColumnType("int");

                    b.Property<int>("WageLow")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyProfileId");

                    b.ToTable("JobOffers");
                });

            modelBuilder.Entity("Targi.Core.Domain.ModeratorProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Position")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ModeratorProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66748671-ef3a-44f6-9334-23d381c95d84"),
                            ContactPerson = "Webmastery",
                            PhoneNumber = "783032065",
                            Position = "admin",
                            UserId = new Guid("99094694-8cd9-4a8d-890c-1a2d5de6b396")
                        });
                });

            modelBuilder.Entity("Targi.Core.Domain.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Position")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Photo");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Photo");
                });

            modelBuilder.Entity("Targi.Core.Domain.Social", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyProfileId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CompanyProfileId");

                    b.ToTable("Socials");
                });

            modelBuilder.Entity("Targi.Core.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCompany")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("Password")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob");

                    b.Property<string>("Role")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99094694-8cd9-4a8d-890c-1a2d5de6b396"),
                            CreatedAt = new DateTime(2020, 11, 2, 1, 2, 50, 128, DateTimeKind.Local).AddTicks(8785),
                            Email = "admin",
                            IsActive = true,
                            IsCompany = false,
                            Password = new byte[] { 254, 6, 203, 118, 184, 139, 208, 42, 226, 210, 38, 162, 56, 78, 35, 158, 98, 254, 190, 179, 187, 59, 88, 191, 84, 194, 113, 234, 230, 182, 6, 116, 14, 5, 218, 167, 21, 113, 224, 222, 164, 196, 144, 115, 83, 10, 70, 21, 212, 234, 82, 33, 19, 220, 173, 114, 222, 43, 117, 114, 216, 167, 48, 37 },
                            PasswordSalt = new byte[] { 96, 253, 160, 120, 164, 86, 152, 225, 69, 186, 210, 129, 127, 9, 191, 79, 72, 63, 197, 13, 112, 113, 75, 161, 5, 158, 242, 38, 181, 160, 101, 155, 245, 228, 92, 149, 144, 76, 27, 55, 228, 225, 238, 72, 13, 244, 79, 167, 193, 126, 112, 156, 91, 10, 123, 95, 62, 10, 13, 58, 119, 235, 87, 179, 18, 131, 138, 72, 11, 98, 49, 101, 84, 129, 200, 163, 251, 233, 11, 114, 86, 47, 105, 183, 36, 163, 219, 49, 99, 83, 158, 212, 74, 130, 75, 162, 203, 179, 171, 255, 160, 107, 159, 188, 191, 50, 168, 75, 40, 230, 88, 169, 71, 237, 217, 203, 93, 236, 6, 211, 119, 176, 18, 234, 104, 141, 181, 77 },
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("Targi.Core.Domain.Webinar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompanyProfileId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("EndDateOfTheEvent")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("StartDateOfTheEvent")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("WebinarUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CompanyProfileId");

                    b.ToTable("Webinars");
                });

            modelBuilder.Entity("Targi.Core.Domain.CompanyProfilePhoto", b =>
                {
                    b.HasBaseType("Targi.Core.Domain.Photo");

                    b.Property<Guid>("CompanyProfileId")
                        .HasColumnType("char(36)");

                    b.HasIndex("CompanyProfileId");

                    b.HasDiscriminator().HasValue("CompanyProfilePhoto");
                });

            modelBuilder.Entity("Targi.Core.Domain.JobOfferPhoto", b =>
                {
                    b.HasBaseType("Targi.Core.Domain.Photo");

                    b.Property<Guid>("JobOfferId")
                        .HasColumnType("char(36)");

                    b.HasIndex("JobOfferId");

                    b.HasDiscriminator().HasValue("JobOfferPhoto");
                });

            modelBuilder.Entity("Targi.Core.Domain.WebinarPhoto", b =>
                {
                    b.HasBaseType("Targi.Core.Domain.Photo");

                    b.Property<Guid>("WebinarId")
                        .HasColumnType("char(36)");

                    b.HasIndex("WebinarId");

                    b.HasDiscriminator().HasValue("WebinarPhoto");
                });

            modelBuilder.Entity("Targi.Core.Domain.BenefitCard", b =>
                {
                    b.HasOne("Targi.Core.Domain.CompanyProfile", null)
                        .WithMany("BenefitCards")
                        .HasForeignKey("CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Targi.Core.Domain.CompanyProfile", b =>
                {
                    b.HasOne("Targi.Core.Domain.User", "User")
                        .WithOne("CompanyProfile")
                        .HasForeignKey("Targi.Core.Domain.CompanyProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Targi.Core.Domain.JobOffer", b =>
                {
                    b.HasOne("Targi.Core.Domain.CompanyProfile", "CompanyProfile")
                        .WithMany("JobOffers")
                        .HasForeignKey("CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Targi.Core.Domain.ModeratorProfile", b =>
                {
                    b.HasOne("Targi.Core.Domain.User", "User")
                        .WithOne("ModeratorProfile")
                        .HasForeignKey("Targi.Core.Domain.ModeratorProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Targi.Core.Domain.Social", b =>
                {
                    b.HasOne("Targi.Core.Domain.CompanyProfile", null)
                        .WithMany("Socials")
                        .HasForeignKey("CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Targi.Core.Domain.Webinar", b =>
                {
                    b.HasOne("Targi.Core.Domain.CompanyProfile", "CompanyProfile")
                        .WithMany("Webinars")
                        .HasForeignKey("CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Targi.Core.Domain.CompanyProfilePhoto", b =>
                {
                    b.HasOne("Targi.Core.Domain.CompanyProfile", "CompanyProfile")
                        .WithMany("Photos")
                        .HasForeignKey("CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Targi.Core.Domain.JobOfferPhoto", b =>
                {
                    b.HasOne("Targi.Core.Domain.JobOffer", "JobOffer")
                        .WithMany("Photos")
                        .HasForeignKey("JobOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Targi.Core.Domain.WebinarPhoto", b =>
                {
                    b.HasOne("Targi.Core.Domain.Webinar", "Webinar")
                        .WithMany("Photos")
                        .HasForeignKey("WebinarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
